set(DEPENDS_PATH @INSTALL_PREFIX_TARGET@)
set(NATIVEPREFIX @INSTALL_PREFIX_HOST@)

set(WITH_KODI_DEPENDS @PROJECT_SOURCE_DIR@)
set(CMAKE_INSTALL_PREFIX @INSTALL_PREFIX_TARGET@)
set(CMAKE_INSTALL_LIBDIR @INSTALL_PREFIX_TARGET@/lib)
set(CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@)
set(CMAKE_SYSTEM_PROCESSOR @WITH_CPU@)
set(CPU @WITH_CPU@)
set(CORE_SYSTEM_NAME @CORE_SYSTEM_NAME@)
set(CORE_PLATFORM_NAME_LC @CORE_PLATFORM_NAME_LC@)
set(RENDERSYSTEM @WITH_RENDERSYSTEM@)
set(TOOLCHAIN @WITH_TOOLCHAIN@)
set(TARGET @WITH_TARGET@)
set(ENABLE_CCACHE @ENABLE_CCACHE@)

# set CORE_SYSTEM_NAME and CMAKE_SYSTEM_NAME (sets CMAKE_CROSSCOMPILING)
if(CMAKE_SYSTEM_NAME STREQUAL Linux)
  if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
    # wrapping libdvd fails with gold on rbpi
    # todo: revisit after toolchain bump
    set(ENABLE_LDGOLD OFF CACHE BOOL "Disabling Gnu Gold Linker" FORCE)
  endif()
  if(RENDERSYSTEM)
    set(X11_RENDER_SYSTEM ${RENDERSYSTEM} CACHE STRING "Render system to use with X11: \"gl\" or \"gles\"")
    set(WAYLAND_RENDER_SYSTEM ${RENDERSYSTEM} CACHE STRING "Render system to use with Wayland: \"gl\" or \"gles\"")
    set(GBM_RENDER_SYSTEM ${RENDERSYSTEM} CACHE STRING "Render system to use with GBM: \"gl\" or \"gles\"")
  else()
    set(X11_RENDER_SYSTEM gl CACHE STRING "Render system to use with X11: \"gl\" or \"gles\"")
    set(WAYLAND_RENDER_SYSTEM gl CACHE STRING "Render system to use with Wayland: \"gl\" or \"gles\"")
    set(GBM_RENDER_SYSTEM gles CACHE STRING "Render system to use with GBM: \"gl\" or \"gles\"")
  endif()
endif()

# if(CORE_SYSTEM_NAME STREQUAL darwin_embedded)
#   # Necessary to build the main Application (but not other dependencies)
#   # with Xcode (and a bundle with Makefiles) (https://cmake.org/Bug/view.php?id=15329)
#   if(NOT PROJECT_SOURCE_DIR MATCHES "tools/depends")
#     message(STATUS "Toolchain enabled ${CORE_PLATFORM_NAME_LC} bundle for project ${PROJECT_NAME}")
#     set(CMAKE_MACOSX_BUNDLE YES)
#     set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED NO)
#     # Need to set this attribute to "" in order to
#     # complety disable code signing
#     # see: https://gitlab.kitware.com/cmake/cmake/issues/19112
#     set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY)
#     if(CORE_PLATFORM_NAME_LC STREQUAL tvos)
#       set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE YES)
#       set(CMAKE_XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY 3)
#       set(CMAKE_XCODE_ATTRIBUTE_TVOS_DEPLOYMENT_TARGET 11.0)
#     else()
#       # set this to YES once we have a deployment target of at least iOS 6.0
#       set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE NO)
#       set(CMAKE_XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY 1,2)
#       set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET 11.0)
#     endif()
#   endif()
# endif()

if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
  set(CMAKE_OSX_SYSROOT @WITH_SDK_PATH@)
  set(CMAKE_XCODE_ATTRIBUTE_ARCHS ${CPU})
endif()

set(CMAKE_SYSTEM_VERSION 1)

# specify the cross compiler
set(CMAKE_C_COMPILER @TARGET_CC@)
set(CMAKE_CXX_COMPILER @TARGET_CXX@)
set(CMAKE_AR @TARGET_AR@)
set(CMAKE_LINKER @TARGET_LD@)
set(CMAKE_NM @TARGET_NM@)
set(CMAKE_STRIP @TARGET_STRIP@)
set(CMAKE_OBJDUMP @TARGET_OBJDUMP@)
set(CMAKE_RANLIB @TARGET_RANLIB@)

if(ENABLE_CCACHE)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE @CCACHE_PROGRAM@)
endif()

# where is the target environment
set(CMAKE_FIND_ROOT_PATH @INSTALL_PREFIX_TARGET@)
set(CMAKE_LIBRARY_PATH @INSTALL_PREFIX_TARGET@/lib)
if(TOOLCHAIN)
  list(APPEND CMAKE_FIND_ROOT_PATH ${TOOLCHAIN} ${TOOLCHAIN}/${TARGET} ${TOOLCHAIN}/${TARGET}/sysroot ${TOOLCHAIN}/${TARGET}/sysroot/usr ${TOOLCHAIN}/${TARGET}/libc ${TOOLCHAIN}/lib/${TARGET}/sysroot ${TOOLCHAIN}/usr ${TOOLCHAIN}/sysroot/usr)
  set(CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH}:${TOOLCHAIN}/usr/lib/${TARGET}:${TOOLCHAIN}/lib/${TARGET}")
endif()

# add RBPI's firmware directories
if(CORE_PLATFORM_NAME_LC STREQUAL rbpi)
  list(APPEND CMAKE_FIND_ROOT_PATH @WITH_FIRMWARE@/opt/vc)
  list(APPEND CMAKE_LIBRARY_PATH @WITH_FIRMWARE@/opt/vc/lib)
  list(APPEND CMAKE_INCLUDE_PATH @WITH_FIRMWARE@/opt/vc/include)
endif()

# add Android directories and tools
if(CORE_SYSTEM_NAME STREQUAL android)
  set(NDKROOT @WITH_NDK_PATH@)
  set(SDKROOT @WITH_SDK_PATH@)
  list(APPEND CMAKE_LIBRARY_PATH ${TOOLCHAIN}/sysroot/usr/lib/${TARGET}/@WITH_NDK_API@)
  set(SDK_BUILDTOOLS_PATH @SDK_BUILDTOOLS_PATH@)
endif()

set(CMAKE_C_FLAGS "@CMAKE_C_FLAGS@")
set(CMAKE_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

set(CMAKE_C_FLAGS_RELEASE "@CMAKE_C_FLAGS_RELEASE@")
set(CMAKE_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@")

set(CMAKE_C_FLAGS_DEBUG "@CMAKE_C_FLAGS_DEBUG@")
set(CMAKE_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@")

set(CMAKE_CPP_FLAGS "@CMAKE_C_FLAGS@")
set(CMAKE_EXE_LINKER_FLAGS "@CMAKE_EXE_LINKER_FLAGS@")

set(ENV{CFLAGS} "${CMAKE_C_FLAGS}")
set(ENV{CXXFLAGS} "${CMAKE_CXX_FLAGS}")
set(ENV{CPPFLAGS} "${CMAKE_CPP_FLAGS}")
set(ENV{LDFLAGS} "${CMAKE_EXE_LINKER_FLAGS}")

# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_FRAMEWORK LAST)
set(ENV{PKG_CONFIG_LIBDIR} @INSTALL_PREFIX_TARGET@/lib/pkgconfig:@INSTALL_PREFIX_TARGET@/share/pkgconfig)

# Binary Addons
if(NOT CORE_SYSTEM_NAME STREQUAL linux)
  set(ADDONS_PREFER_STATIC_LIBS ON)
endif()

set(KODI_DEPENDSBUILD 1)
